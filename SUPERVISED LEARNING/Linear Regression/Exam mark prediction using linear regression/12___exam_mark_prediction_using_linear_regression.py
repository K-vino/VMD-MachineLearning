# -*- coding: utf-8 -*-
"""12 | Exam mark prediction using Linear Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13_OEDzOvlIJ8RfAko5X58J5IUPTXi8jj

# **Day-12 | Exam mark prediction using Linear Regression-multipleVariable**

### *Import Libraries*
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
import numpy as np
"""### *Load Dataset from Local Directory*"""

##from google.colab import files
##uploaded = files.upload()

"""### *Load Dataset*"""

dataset = pd.read_csv('data.csv')

"""### *Load Summarize*"""

print(dataset.shape)
print(dataset.head(5))

"""### *Finding & Removing NA values from our Features X*"""

dataset.columns[dataset.isna().any()]

dataset.hours = dataset.hours.fillna(dataset.hours.mean())

"""### *Segregate Dataset into Input X & Output Y*"""

X = dataset.iloc[:, :-1].values
print(X.shape)
X

Y = dataset.iloc[:, -1].values
Y



from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.25,random_state =0)

"""### *Training Dataset using Linear Regression*"""


model = LinearRegression()
model.fit(X_train,y_train)


y_pred=model.predict(X_test)
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
errors = mean_squared_error(y_pred,y_test)
# Calculate validation metrics
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

# Output the validation metrics
print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
print(f"RÂ² Score: {r2:.2f}")
"""### *Predicted Price for Land sq.Feet of custom values*"""

##a=[[9.2,20,0]]
##PredictedmodelResult = model.predict(a)
##print(PredictedmodelResult)
